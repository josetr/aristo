{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Barcode","value","inputRef","useBarcode","options","width","height","style","textAlign","fontWeight","ref","genRandom","Math","floor","min","max","random","done","SCOPES","CLIENT_ID","sync","arr","setMessage","a","fileName","gapi","client","drive","files","list","q","response","result","length","i","file","name","fileId","id","undefined","create","resource","mimeType","parents","fields","status","console","log","get","alt","content","body","set","Set","split","map","x","parseInt","concat","delete","NaN","newContent","Array","from","keys","toString","padStart","join","request","path","method","headers","params","uploadType","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","useState","setValue","codes","setCodes","loggedInStatus","setLoggedInStatus","setInitiatedClient","message","classes","generate","size","offset","_","range","useEffect","load","init","clientId","scope","auth2","getAuthInstance","isSignedIn","listen","updateLoggedInStatus","err","error","initClient","AppBar","position","Toolbar","IconButton","edge","className","color","Menu","Typography","variant","Button","buttonText","display","cookiePolicy","onLogoutSuccess","padding","margin","onClick","Input","type","maxWidth","verticalAlign","inputProps","maxLength","datatype","onChange","e","target","alert","window","print","code","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b54b33a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { useBarcode } from 'react-barcodes';\nimport { GoogleLogin } from 'react-google-login';\nimport { GoogleLogout } from 'react-google-login';\nimport { AppBar, Button, Container, IconButton, Input, makeStyles, Toolbar, Typography } from '@material-ui/core';\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\n\nfunction Barcode({ value }: { value: string }) {\n  const { inputRef } = useBarcode({\n    value: value,\n    options: {\n      width: 2,\n      height: 100\n    }\n  });\n\n  return <li style={{}}>\n    <div style={{ textAlign: 'center', fontWeight: 'bold' }}>Aristo</div>\n    <svg ref={inputRef} />\n  </li>;\n}\n\nfunction randomIntFromInterval(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nfunction genRandom() {\n  return Math.floor((randomIntFromInterval(1, 99999999999999)))\n}\n\nfunction range(size: number, offset: number = 1) {\n  return Array.from({ length: size }, (_, i) => i + offset);\n}\n\nlet done = false;\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\nconst CLIENT_ID = \"843901847350-30igg13jkqtha7fnb3eh7seatf09n93t.apps.googleusercontent.com\"\n\nconst initClient = (options: {\n  updateLoggedInStatus: (status: boolean) => void;\n}) => {\n  if (done) {\n    return;\n  }\n  done = true;\n\n  try {\n    const response = gapi.client\n      .init({\n        //apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        //discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      })\n\n    // Listen for sign-in state changes.\n    console.log(\"gapi.auth2\", gapi.auth2);\n\n    gapi.auth2\n      .getAuthInstance()\n      .isSignedIn.listen(options.updateLoggedInStatus);\n\n    // Handle the initial sign-in state.\n    options.updateLoggedInStatus(\n      gapi.auth2.getAuthInstance().isSignedIn.get()\n    );\n\n  } catch (err: any) {\n    console.error(\"Caught error\", err);\n  }\n};\n\nasync function sync(arr: number[], setMessage: (msg: string) => any) {\n  const fileName = \"aristo-unique-codes.txt\"\n\n  setMessage(\"Fetching database...\")\n  var response = await gapi.client.drive.files.list({ 'pageSize': 100, 'fields': \"files(id, name, trashed)\", q: 'trashed=false' })\n\n  var files = response.result.files;\n  var fileId: string | undefined\n\n  if (files && files.length > 0) {\n    for (var i = 0; i < files.length; i++) {\n      var file = files[i];\n      if (file.name == fileName) {\n        fileId = file.id\n        break;\n      }\n    }\n  }\n\n  if (fileId == undefined) {\n    response = await gapi.client.drive.files.create({\n      resource: {\n        name: fileName,\n        mimeType: 'text/plain',\n        parents: [\"root\"]\n      },\n      fields: \"id\"\n    })\n    switch (response.status) {\n      case 200:\n        file = response.result;\n        fileId = file.id\n        console.log('Created file: ', file.id);\n        break;\n      default:\n        console.log('Error creating the file, ' + response);\n        break;\n    }\n  }\n\n  if (fileId == undefined)\n    return // TODO\n\n  response = await gapi.client.drive.files.get({ fileId: fileId, alt: \"media\", fields: \"id\" })\n\n  let content = \"\"\n\n  switch (response.status) {\n    case 200:\n      file = response.result;\n      content = response.body\n      break;\n    default:\n      setMessage('Error creating file, ' + response);\n      break;\n  }\n\n  let set = new Set(content.split(\"\\n\").map(x => parseInt(x)).concat(arr))\n  set.delete(NaN)\n  set.delete(0)\n\n  var newContent = Array.from(set.keys()).map(x => x.toString().padStart(14, \"0\")).join(\"\\n\")\n\n  setMessage(\"Updating database...\")\n\n  response = await gapi.client.request({\n    path: \"https://www.googleapis.com/upload/drive/v3/files/\" + fileId,\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': \"text/plain\",\n      \"Content-Length\": content.length,\n    },\n    params: { uploadType: \"media\" },\n    body: newContent\n  })\n\n  setMessage(\"\")\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const [value, setValue] = useState(18)\n  const [codes, setCodes] = useState<number[]>([])\n  const [loggedInStatus, setLoggedInStatus] = useState<boolean>(false);\n  const [initiatedClient, setInitiatedClient] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n  const classes = useStyles();\n\n  useEffect(() => {\n    gapi.load('client', function () {\n      gapi.client.load('drive', 'v3', function () {\n      });\n    });\n\n    gapi.load(\"client:auth2\", () => {\n      initClient({\n        updateLoggedInStatus: (status: any) => {\n          setLoggedInStatus(status);\n        },\n      })\n    });\n\n    setInitiatedClient(true);\n  }, [])\n\n  function generate() {\n    setCodes(range(value).map(() => genRandom()))\n  }\n\n  function Body() {\n    if (!loggedInStatus)\n      return <></>\n    return <div style={{ textAlign: \"center\", padding: \"10px\" }}>\n      <div className=\"noprint\" >\n        {loggedInStatus && <div>\n          <div style={{ margin: \"5px\" }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={generate}>Generate barcodes</Button>\n            <Input type=\"text\" style={{ maxWidth: \"35px\", margin: \"0 5px\", verticalAlign: \"center\" }} inputProps={{ maxLength: 3 }} datatype={\"number\"} value={value} onChange={e => setValue(parseInt(e.target.value))} />\n          </div >\n          <div style={{ margin: \"5px\" }}>\n            {codes.length > 0 && <Button variant=\"outlined\" color=\"primary\" onClick={\n              async () => {\n                try {\n                  await sync(codes, setMessage)\n                }\n                catch (e) {\n                  setMessage(\"\")\n                  alert(\"An error ocurred while trying to sync with the cloud. Printing codes that are not stored in the cloud is not recommended.\")\n                }\n                window.print()\n              }}>Print</Button>}\n            &nbsp;\n          </div>\n          <p>\n            {message}\n          </p>\n        </div>}\n      </div>\n      <ul className=\"BarcodeList\">\n        {codes.map(code => <Barcode value={code.toString().padStart(14, \"0\")} />)}\n      </ul>\n    </div>\n  }\n\n  return <div>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          Aristo\n        </Typography>\n        <Button color=\"inherit\"> {!loggedInStatus && <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText=\"Log in with Google\"\n          style={{ display: \"inline-block\" }}\n          scope={SCOPES}\n          cookiePolicy={'single_host_origin'}\n        />}\n          {loggedInStatus &&\n            <GoogleLogout\n              clientId={CLIENT_ID}\n              buttonText=\"Logout\"\n              onLogoutSuccess={() => { }}\n            >\n            </GoogleLogout>}</Button>\n      </Toolbar>\n    </AppBar>\n    {Body()}\n  </div>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}